library(rworldmap)
a=read.csv("HumanDevelopmentIndex.csv" )
a
a=read.csv("HumanDevelopmentIndex.csv", header=F )
a
names(a) = c("NAME", "HDI")
aÃ§
a
REGIONmapCountryData(a, nameColumnToPlot="HDI")
REGIONmapCountryData(a, nameColumnToPlot="HDI")
mapCountryData(a, nameColumnToPlot="HDI")
b=joinCountryData2Map(a, joinCode="NAME", nameJoinColumn="Country", verbose=T)
names(a) = c("Country", "HDI")
b=joinCountryData2Map(a, joinCode="NAME", nameJoinColumn="Country", verbose=T)
mapCountryData(b, nameColumnToPlot="HDI")
library(RColorBrewer)
display.brewer.all(colorblindFriendly=TRUE)
mapCountryData(b, nameColumnToPlot="HDI", colourPalette=brewer.pal("YlGnBu"))
colourPalette=brewer.pal("YlGnBu")
colourPalette=brewer.pal(YlGnBu)
colourPalette=brewer.pal(9, "YlGnBu")
colourPalette=brewer.pal(name="YlGnBu")
colourPalette=brewer.pal(90, "YlGnBu")
colourPalette=brewer.pal(9, "YlGnBu")
mapCountryData(b, nameColumnToPlot="HDI", colourPalette=brewer.pal(9, "YlGnBu"))
mapCountryData(b, nameColumnToPlot="HDI", colourPalette=brewer.pal(7, "YlGnBu"))
library(rworldmap)
?mapCountryData
library(rworldmap)
mapCountryData
> mapCountryData
function (mapToPlot = "", nameColumnToPlot = "", numCats = 7, 
    xlim = NA, ylim = NA, mapRegion = "world", catMethod = "quantiles", 
    colourPalette = "heat", addLegend = TRUE, borderCol = "grey", 
    mapTitle = "columnName", oceanCol = NA, aspect = 1, missingCountryCol = NA, 
    add = FALSE, nameColumnToHatch = "", lwd = 0.5) 
{
    functionName <- as.character(sys.call()[[1]])
    new <- TRUE
    if (new) {
        mapToPlot <- rwmCheckAndLoadInput(mapToPlot, inputNeeded = "sPDF", 
            callingFunction = functionName)
    }
    else {
        if (class(mapToPlot) == "SpatialPolygonsDataFrame") {
            if (length(mapToPlot@data[, 1]) < 1) {
                stop("seems to be no data in your chosen file or dataframe in ", 
                  functionName)
                return(FALSE)
            }
        }
        else if (mapToPlot == "") {
            message(paste("using example data because no file specified in", 
                functionName))
            mapToPlot <- getMap(resolution = "coarse")
            if (nameColumnToPlot == "") 
                nameColumnToPlot <- "POP_EST"
        }
        else {
            stop(functionName, " requires a SpatialPolygonsDataFrame object created by the joinCountryData2Map() function \n")
            return(FALSE)
        }
    }
    if (nameColumnToPlot == "") 
        nameColumnToPlot <- "POP_EST"
    if (is.na(match(nameColumnToPlot, names(mapToPlot@data)))) {
        stop("your chosen nameColumnToPlot :'", nameColumnToPlot, 
            "' seems not to exist in your data, columns = ", 
            paste(names(mapToPlot@data), ""))
        return(FALSE)
    }
    dataCategorised <- mapToPlot@data[[nameColumnToPlot]]
    if (!is.numeric(dataCategorised) && catMethod != "categorical") {
        catMethod = "categorical"
        message(paste("using catMethod='categorical' for non numeric data in", 
            functionName))
    }
    if (length(catMethod) == 1 && catMethod == "categorical") {
        dataCategorised <- as.factor(dataCategorised)
        cutVector <- levels(dataCategorised)
        numColours <- length(levels(dataCategorised))
    }
    else if (is.numeric(catMethod)) {
        cutVector <- catMethod
        numColours <- -1 + length(catMethod)
        dataCategorised <- cut(dataCategorised, cutVector, include.lowest = TRUE)
    }
    else if (is.character(catMethod)) {
        cutVector <- rwmGetClassBreaks(dataCategorised, catMethod = catMethod, 
            numCats = numCats, verbose = TRUE)
        dataCategorised <- cut(dataCategorised, cutVector, include.lowest = TRUE)
        numColours <- length(levels(dataCategorised))
    }
    colNameRaw <- nameColumnToPlot
    colNameCat <- paste(colNameRaw, "categorised", sep = "")
    mapToPlot@data[[colNameCat]] <- dataCategorised
    colourVector <- rwmGetColours(colourPalette, numColours)
    dataCatNums <- as.numeric(dataCategorised)
    if (!is.na(missingCountryCol)) {
        colourVector <- c(colourVector, missingCountryCol)
        dataCatNums[is.na(dataCatNums)] <- length(colourVector)
    }
    hatchVar = NULL
    if (nameColumnToHatch == "") {
        if (!add) 
            rwmNewMapPlot(mapToPlot, mapRegion = mapRegion, xlim = xlim, 
                ylim = ylim, oceanCol = oceanCol, aspect = aspect)
        plot(mapToPlot, col = colourVector[dataCatNums], border = borderCol, 
            add = TRUE, usePolypath = FALSE, lwd = lwd)
    }
    else {
        hatchVar = mapToPlot@data[[nameColumnToHatch]]
        hatchVar = (hatchVar - min(hatchVar, na.rm = TRUE))/max(hatchVar, 
            na.rm = TRUE)
        hatchVar = 1 - hatchVar
        hatchVar = (hatchVar * 50) + 30
        hatchVar[hatchVar > 79] = -1
        if (!add) 
            rwmNewMapPlot(mapToPlot, mapRegion = mapRegion, xlim = xlim, 
                ylim = ylim, oceanCol = oceanCol, aspect = aspect)
        plot(mapToPlot, col = colourVector[dataCatNums], border = borderCol, 
            density = hatchVar, angle = 135, lty = 1, add = TRUE, 
            usePolypath = FALSE, lwd = lwd)
        plot(mapToPlot, col = colourVector[dataCatNums], border = borderCol, 
            density = hatchVar, angle = 45, lty = 1, add = TRUE, 
            usePolypath = FALSE, lwd = lwd)
    }
    if (addLegend) {
        if ((length(catMethod) == 1 && catMethod == "categorical")) {
            addMapLegendBoxes(colourVector = colourVector, cutVector = cutVector, 
                catMethod = catMethod)
        }
        else {
            addMapLegend(cutVector = cutVector, colourVector = colourVector)
        }
    }
    if (mapTitle == "columnName") {
        title(nameColumnToPlot)
    }
    else {
        title(mapTitle)
    }
    invisible(list(colourVector = colourVector, cutVector = cutVector, 
        plottedData = mapToPlot[[nameColumnToPlot]], catMethod = catMethod, 
        colourPalette = colourPalette))
}
<bytecode: 0x559dc83d10c8>
<environment: namespace:rworldmap>
mapCountryData2 = function (mapToPlot = "", nameColumnToPlot = "", numCats = 7, 
    xlim = NA, ylim = NA, mapRegion = "world", catMethod = "quantiles", 
    colourPalette = "heat", addLegend = TRUE, borderCol = "grey", 
    mapTitle = "columnName", oceanCol = NA, aspect = 1, missingCountryCol = NA, 
    add = FALSE, nameColumnToHatch = "", lwd = 0.5) 
{
    functionName <- as.character(sys.call()[[1]])
    new <- TRUE
    if (new) {
        mapToPlot <- rwmCheckAndLoadInput(mapToPlot, inputNeeded = "sPDF", 
            callingFunction = functionName)
    }
    else {
        if (class(mapToPlot) == "SpatialPolygonsDataFrame") {
            if (length(mapToPlot@data[, 1]) < 1) {
                stop("seems to be no data in your chosen file or dataframe in ", 
                  functionName)
                return(FALSE)
            }
        }
        else if (mapToPlot == "") {
            message(paste("using example data because no file specified in", 
                functionName))
            mapToPlot <- getMap(resolution = "coarse")
            if (nameColumnToPlot == "") 
                nameColumnToPlot <- "POP_EST"
        }
        else {
            stop(functionName, " requires a SpatialPolygonsDataFrame object created by the joinCountryData2Map() function \n")
            return(FALSE)
        }
    }
    if (nameColumnToPlot == "") 
        nameColumnToPlot <- "POP_EST"
    if (is.na(match(nameColumnToPlot, names(mapToPlot@data)))) {
        stop("your chosen nameColumnToPlot :'", nameColumnToPlot, 
            "' seems not to exist in your data, columns = ", 
            paste(names(mapToPlot@data), ""))
        return(FALSE)
    }
    dataCategorised <- mapToPlot@data[[nameColumnToPlot]]
    if (!is.numeric(dataCategorised) && catMethod != "categorical") {
        catMethod = "categorical"
        message(paste("using catMethod='categorical' for non numeric data in", 
            functionName))
    }
    if (length(catMethod) == 1 && catMethod == "categorical") {
        dataCategorised <- as.factor(dataCategorised)
        cutVector <- levels(dataCategorised)
        numColours <- length(levels(dataCategorised))
    }
    else if (is.numeric(catMethod)) {
        cutVector <- catMethod
        numColours <- -1 + length(catMethod)
        dataCategorised <- cut(dataCategorised, cutVector, include.lowest = TRUE)
    }
    else if (is.character(catMethod)) {
        cutVector <- rwmGetClassBreaks(dataCategorised, catMethod = catMethod, 
            numCats = numCats, verbose = TRUE)
        dataCategorised <- cut(dataCategorised, cutVector, include.lowest = TRUE)
        numColours <- length(levels(dataCategorised))
    }
    colNameRaw <- nameColumnToPlot
    colNameCat <- paste(colNameRaw, "categorised", sep = "")
    mapToPlot@data[[colNameCat]] <- dataCategorised
    colourVector <- rwmGetColours(colourPalette, numColours)
    dataCatNums <- as.numeric(dataCategorised)
    if (!is.na(missingCountryCol)) {
        colourVector <- c(colourVector, missingCountryCol)
        dataCatNums[is.na(dataCatNums)] <- length(colourVector)
    }
    hatchVar = NULL
    if (nameColumnToHatch == "") {
        if (!add) 
            rwmNewMapPlot(mapToPlot, mapRegion = mapRegion, xlim = xlim, 
                ylim = ylim, oceanCol = oceanCol, aspect = aspect)
        plot(mapToPlot, col = colourVector[dataCatNums], border = borderCol, 
            add = TRUE, usePolypath = FALSE, lwd = lwd)
    }
    else {
        hatchVar = mapToPlot@data[[nameColumnToHatch]]
        hatchVar = (hatchVar - min(hatchVar, na.rm = TRUE))/max(hatchVar, 
            na.rm = TRUE)
        hatchVar = 1 - hatchVar
        hatchVar = (hatchVar * 50) + 30
        hatchVar[hatchVar > 79] = -1
        if (!add) 
            rwmNewMapPlot(mapToPlot, mapRegion = mapRegion, xlim = xlim, 
                ylim = ylim, oceanCol = oceanCol, aspect = aspect)
        plot(mapToPlot, col = colourVector[dataCatNums], border = borderCol, 
            density = hatchVar, angle = 135, lty = 1, add = TRUE, 
            usePolypath = FALSE, lwd = lwd,  xlim = xlim,ylim = ylim)
        plot(mapToPlot, col = colourVector[dataCatNums], border = borderCol, 
            density = hatchVar, angle = 45, lty = 1, add = TRUE, 
            usePolypath = FALSE, lwd = lwd,  xlim = xlim,ylim = ylim)
    }
    if (addLegend) {
        if ((length(catMethod) == 1 && catMethod == "categorical")) {
            addMapLegendBoxes(colourVector = colourVector, cutVector = cutVector, 
                catMethod = catMethod)
        }
        else {
            addMapLegend(cutVector = cutVector, colourVector = colourVector)
        }
    }
    if (mapTitle == "columnName") {
        title(nameColumnToPlot)
    }
    else {
        title(mapTitle)
    }
    invisible(list(colourVector = colourVector, cutVector = cutVector, 
        plottedData = mapToPlot[[nameColumnToPlot]], catMethod = catMethod, 
        colourPalette = colourPalette))
}
library(rworldmap)
library(RColorBrewer)
a=read.csv("HumanDevelopmentIndex.csv", header=F )
names(a) = c("Country", "HDI")
b=joinCountryData2Map(a, joinCode="NAME", nameJoinColumn="Country", verbose=T)
pdf("world_map-HDI.pdf", width=6, height=4, pointsize=7)
mapCountryData2(b, nameColumnToPlot="HDI", colourPalette=brewer.pal(9, "YlGnBu"), mapTitle="", missingCountryCol="gray", lwd=0.001, numCats=9, xlim=c(-180, 180), ylim=c(-45, 60), addLegend=F)
graphics.off()
